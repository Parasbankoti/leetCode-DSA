class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
       unordered_map<int,vector<pair<int,int>>>adj;

        for(auto i:times){
            int node1=i[0],node2=i[1],weight=i[2];
            adj[node1].push_back({node2,weight});
        }
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;

        vector<int>vis(n+1,INT_MAX);
        pq.push({k,0});
        vis[k]=0;

        while(!pq.empty()){
            int node = pq.top().first;
            int weight = pq.top().second;
            pq.pop();

            for(auto i:adj[node]){
                int adjNode=i.first, adjWeight=i.second;
                if(vis[adjNode] > weight+adjWeight){
                    vis[adjNode] = weight+adjWeight;
                    pq.push({adjNode,weight+adjWeight});
                }
            }

        }
    int res=INT_MIN;
    vis[0]=0;
        for(int i:vis)
      {
          if(i == INT_MAX) return -1;
        res=max(res,i);
      }
        
    return res;
    }
};
