class Solution {
public:
vector<int>dir = {-1,0,1,0,-1};
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int res=0;
        int row=maze.size(),col=maze[0].size();
        queue<pair<int,int>>pq;
        pq.push({entrance[0],entrance[1]});
 maze[entrance[0]][entrance[1]] = '+';
        while(!pq.empty()){
            int sz = pq.size();
            
        while(sz--){
                int r=pq.front().first,c=pq.front().second;
                pq.pop();

                if( !(r == entrance[0] && c == entrance[1] ) && (r == 0 || c == 0 || r == row-1 || c == col-1) )
                return res;

                for(int i=0;i<4;i++){
                    int newRow = r+dir[i],newCol=c+dir[i+1];

                    if(newRow >=0 && newCol >=0 && newRow < row && newCol < col && maze[newRow][newCol] == '.')                     
                    {
                         pq.push({newRow,newCol});
                          maze[newRow][newCol] = '+';
                           
                          
                    }
                }
            }
            res++;
        }
        return -1;
    }
};
