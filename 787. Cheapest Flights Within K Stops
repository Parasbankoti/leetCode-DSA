class Solution {
public:
typedef pair<int,pair<int,int>> p;
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        unordered_map<int,vector<pair<int,int>>>adj;
        for(auto i:flights){
            int currNode=i[0],nextNode=i[1],weight=i[2];
            adj[currNode].push_back({weight,nextNode});
        }
        vector<int>vis(n,INT_MAX);
        vis[src]=0;
        priority_queue<p>pq;
        pq.push({k+1,{0,src}});

        while(!pq.empty()){
            pair<int,int>temp = pq.top().second;
            int currNode = temp.second;
            int currTicket = temp.first;
            int currStops=pq.top().first;
            pq.pop();

            for(auto i:adj[currNode]){
                int nextNode = i.second,nextTicket = i.first;
                int updatedTicket = currTicket+nextTicket;
                if( currStops >0 && vis[nextNode] > updatedTicket){
                    vis[nextNode] = updatedTicket;
                    pq.push({currStops-1,{updatedTicket,nextNode}});
                }
            }
        }
        if(vis[dst] == INT_MAX) return -1;
        return vis[dst];
    }
};
